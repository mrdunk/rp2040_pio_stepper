; Copyright (c) 2023 duncan law

; A pair of RP2040 PIO programmes for controlling stepper motors.
; The first (step_gen) sets step and direction IO pins for driving stepper motors.
; The second (step_count) counts the change in polarity of the step and direction
; IO pin and tracks the resulting stepper motor position.



; This program sets step and direction IO pin according to FIFO inputs.
;
; Expects 2 32bit words on the TX FIFO.
; The first word is the polarity of the direction pin. 0 = off. Any other value = on.
; The second word is the length of the pulse on the step pin. Steps continue at
; the specified rate until new data is sent.
; A zero pulse length disables the step pin altogether until new data arrives via FIFO.

.program step_gen
.side_set 1 opt

  set x, 0

start:
    mov y, STATUS   side 0    ; Determine if new data has arrived.
    jmp !y, new_data
    nop [7]                   ; No new data.

data_acquired:
    jmp !x, start             ; Special case. Treat step length of 0 as no steps
                              ; until further data is received.

    mov y, x                  ; Restore the step length.
pause_off:
    jmp y-- pause_off

    mov y, x       side 1     ; Restore the step length. Turn step pin on.
pause_on:
    jmp y-- pause_on

    jmp start

new_data:
    pull
    out x, 32                 ; Data for direction IO pin.
    jmp !x direction_off
    set pins, 1               ; Direction pin on.
    jmp direction_done
direction_off:
    set pins, 0  [1]          ; Direction pin on.
direction_done:

    pull
    out x, 32                 ; Store step length in X.

    jmp data_acquired



% c-sdk {

// Setup helper function.
static inline void step_gen_program_init(
    PIO pio, uint sm, uint offset, uint pin_step, uint pin_direction
) {
  pio_sm_config config = step_gen_program_get_default_config(offset);

  // Go as fast as possible.
  sm_config_set_clkdiv(&config, 1.0);


  // Setup GPIO

  // Step pin is set using side-set.
  pio_gpio_init(pio, pin_step);
  pio_sm_set_consecutive_pindirs(pio, sm, pin_step, 1, true);
  sm_config_set_sideset_pins(&config, pin_step);

  // Direction pin is set directly.
  pio_gpio_init(pio, pin_direction);
  pio_sm_set_consecutive_pindirs(pio, sm, pin_direction, 1, true);
  sm_config_set_set_pins(&config, pin_direction, 1);


  // Configure FIFOs.
  // Out.
  // sm_config_set_out_shift(pio_sm_config *c, bool shift_right, bool autopull, uint pull_threshold)
  sm_config_set_out_shift(&config, true, false, 32);


  // Enable feedback on input FIFO buffer contents.
  // Sets STATUS according to FIFO level.
  sm_config_set_mov_status(&config, STATUS_TX_LESSTHAN, 1);


  pio_sm_init(pio, sm, offset, &config);
}

%}



; This program monitors step and direction IO pins and tracks stepper motor position.
; Note it reads pin values directly. The RP2040 allows pins configured as outputs
; to be read as inputs, yielding the value they were set to. There is a ~2 instruction
; delay in the IO pins read value reflecting what was set.
;
; The exact timing of this program is not critical as long as it completes quicker
; than the step_gen program.
;
; This program should be sent a single 32bit word on the TX FIFO to configure the
; stating output value. In order to always yield positive values (UINT_MAX / 2)
; places this in the middle of the range.
;
; The program's output is displayed on the RX FIFO. The calling CPU code will need
; to flush the RX FIFO, discarding all but the last word read.

.program step_count
.side_set 1 opt

    pull                      ; Send a single 32bit word as the
    out y, 32                 ; initial starting position.

start:
    wait 0 pin 0              ; Wait for the step pin to transition from low to high.
    wait 1 pin 0

    jmp pin step_increase     ; Increase or decrease depending on value of direction pin.
                              ; The exact pin monitored by this command is set by CPU.

step_decrease:
    jmp y-- step_decrease_continue
step_decrease_continue:
    mov isr, y
    push noblock
    jmp start


step_increase:
    mov y, ~y                 ; The PIO does not have an increment instruction.
    jmp y--, step_increase_continue
step_increase_continue:
    mov y, ~y
    mov isr, y
    push noblock
    jmp start


% c-sdk {

// Setup helper function.
static inline void step_count_program_init(
    PIO pio, uint sm, uint offset, uint pin_step, uint pin_direction
) {
  pio_sm_config config = step_count_program_get_default_config(offset);

  sm_config_set_clkdiv(&config, 1.0);


  // Setup GPIO
  // IO pins are set to be read by this PIO.
  // This assumes they have already be set as output pins by the other PIO.
  pio_sm_set_consecutive_pindirs(pio, sm, pin_step, 2, false);
  sm_config_set_in_pins(&config, pin_step);   // for WAIT, IN
  sm_config_set_jmp_pin(&config, pin_direction);   // for JMP


  // Configure FIFOs.
  // Out.
  // sm_config_set_out_shift(pio_sm_config *c, bool shift_right, bool autopull, uint pull_threshold)
  sm_config_set_out_shift(&config, true, true, 32);

  // In.
  // sm_config_set_in_shift(pio_sm_config *c, bool shift_right, bool autopush, uint push_threshold)
  sm_config_set_in_shift(&config, true, false, 32);


  pio_sm_init(pio, sm, offset, &config);
}

%}


